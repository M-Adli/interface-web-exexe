>>>>>>>>>> REGLE: init
>>>>>>>>>> BUT:app(X,Y,Z)=>leng(Z,?(A1))
 but initial:
(F)app(X,Y,Z)=>leng(Z,?(T))
>>>>>>>>>> REGLE: comput
 nouveaux buts:
(G1)leng(Z,V)=>leng([U|Z],?(T))
(G2)leng(Y,?(T))
 clauses associees:
(es_F([U|X],Y,[U|Z],T):-es_F(X,Y,Z,V),es_G1(Z,V,U,T))
(es_F([],Y,Y,T):-es_G2(Y,T))
>>quel but ?
G1: leng(Z,V)=>leng([U|Z],?(T))
G2: leng(Y,?(T))
G2
>>>>>>>>>> REGLE: postul
 clause associee:
(es_G2(Y,T):-leng(Y,T))
>>>>1 succes partiels   
nouveau but courant: 
(G1)leng(Z,V)=>leng([U|Z],?(T))
>>>>>>>>>> REGLE: dci
 
atome positif choisi : 
leng([U|Z],?(T))
 nouveaux buts:
(H)leng(Z,V)=>leng(Z,?(T))
 clause associee:
(es_G1(Z,V,U,s(T)):-es_H(Z,V,T))
  
nouveau but courant: 
(H)leng(Z,V)=>leng(Z,?(T))
>>>>>>>>>> REGLE: simpl
   
paire d atomes choisie : 
leng(Z,V),leng(Z,?(T))
>> confirmation (o/n):o
 nouveaux buts:
 vrai
 clause associee:
es_H(Z,T,T)
>>>>>>>>>> succes total!
>>>> Voulez-vous voir toutes les clauses d'entree-sortie (tout_es)
>>>> ou seulement leur simplification par depliages (depl_es) ? 
>>>>>>>>>> REGLE: tout_es
 but prouve:
(F)app(X,Y,Z)=>leng(Z,?(T))
   
 predicat associe: 
es_F(X,Y,Z,T)
   
clauses collectees: 
(es_F([U|X],Y,[U|Z],T):-es_F(X,Y,Z,V),es_G1(Z,V,U,T))
(es_F([],Y,Y,T):-es_G2(Y,T))
(es_G2(Y,T):-leng(Y,T))
(es_G1(Z,V,U,s(T)):-es_H(Z,V,T))
es_H(Z,T,T)
>>>>>>>>>> REGLE: depl_es
but prouve:
(F)app(X,Y,Z)=>leng(Z,?(T))
     
predicat associe: 
es_F(X,Y,Z,T)
     
 clauses d'entree-sortie apres depliages: 
(es_F([U|X],Y,[U|Z],s(T)):-es_F(X,Y,Z,T))
(es_F([],Y,Y,T):-leng(Y,T))
>>>> Voulez-vous tronquer es_F (o/n) ? 
o
>>>> par rapport a l'argument numero 3 (o/n/ofin/nfin) ? ofin
 clauses d'entree-sortie tronquees: 
(es_F([U|X],Y,s(T)):-es_F(X,Y,T))
(es_F([],Y,T):-leng(Y,T))
>>>> Fin de la synthese.
>>>> Vous pouvez commencer une autre preuve (g. pour etre aide).
>>>>>>>>>> REGLE: f
ciao.
>>>> Utiliser: tout_es, depl_es, f/fin.
>>>>>>>>>> REGLE: 